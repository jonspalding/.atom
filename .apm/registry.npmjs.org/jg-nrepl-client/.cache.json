{"_id":"jg-nrepl-client","_rev":"1-70c9648f9a92a1a3aa291c5208a6b1c2","name":"jg-nrepl-client","description":"Temporary fork of node-nrepl-client waiting for https://github.com/rksm/node-nrepl-client/issues/8","dist-tags":{"latest":"0.2.3"},"versions":{"0.2.3":{"name":"jg-nrepl-client","version":"0.2.3","description":"Temporary fork of node-nrepl-client waiting for https://github.com/rksm/node-nrepl-client/issues/8","main":"src/nrepl-client.js","scripts":{"test":"node_modules/nodeunit/bin/nodeunit tests/tests.js --reporter minimal"},"keywords":["Clojure","ClojureScript","nREPL","live programming"],"author":{"name":"Robert Krahn"},"contributors":[{"name":"Stuart Mitchell","email":"stu@stuartmitchell.com"}],"license":"MIT","dependencies":{"bencode":"~0.7.0","tree-kill":"~0.0.6"},"devDependencies":{"async":"~0.9","nodeunit":"~0.8"},"gitHead":"da17768d0c2a63478233ab63d5e1ec121e0db834","_id":"jg-nrepl-client@0.2.3","_shasum":"7f9c8c12ac3e6f9e490d0718a347c7bdd61bc52f","_from":".","_npmVersion":"3.5.3","_nodeVersion":"5.5.0","_npmUser":{"name":"jasongilman","email":"jason.gilman@gmail.com"},"dist":{"shasum":"7f9c8c12ac3e6f9e490d0718a347c7bdd61bc52f","tarball":"https://registry.npmjs.org/jg-nrepl-client/-/jg-nrepl-client-0.2.3.tgz"},"maintainers":[{"name":"jasongilman","email":"jason.gilman@gmail.com"}],"_npmOperationalInternal":{"host":"packages-6-west.internal.npmjs.com","tmp":"tmp/jg-nrepl-client-0.2.3.tgz_1454790836314_0.4691387605853379"},"directories":{}}},"readme":"# This is a temporary copy of node.js nREPL client.\n\nThis is a temporary fork of node.js nREPL client until [this issue](https://github.com/rksm/node-nrepl-client/issues/8) is resolved by publishing a new version of the original client.\n\n\n\n\n# node.js nREPL client [![Build Status](https://travis-ci.org/rksm/node-nrepl-client.png?branch=master)](https://travis-ci.org/rksm/node-nrepl-client)\n\nConnects node.js as a nrepl client to a [Clojure nrepl server](https://github.com/clojure/tools.nrepl).\n\nThis is different from [cljs-noderepl](https://github.com/bodil/cljs-noderepl)\nand similar projects as it *does not connect node.js as the repl \"target\"* (so\nthat a nrepl Clojure client can eval code in a JS context) *but the other way\naround* ;)\n\n\n## Usage\n\nTo connect to a running nREPL server and send and receive an eval request do:\n\n```js\nvar nreplClient = require('nrepl-client');\nnreplClient.connect({port: 7889}).once('connect', function() {\n    var expr = '(+ 3 4)';\n    client.eval(expr, function(err, result) {\n        console.log('%s => ', expr, err || result);\n        client.end();\n    });\n});\n```\n\nFor a more detailed example and to use node.js also to start an nREPL Clojure\nprocess see [examples/simple-connect.js]().\n```\n\n## API\n\n### `nrepl-client`\n\n* `connect(options)`\n  * Creates a [`net.Socket`](http://nodejs.org/api/net.html#net_class_net_socket)\n    connection to an nREPL server. The connection object itself will have added\n    methods, see below.\n  * `options`: options from the [`net.connect`](http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener) call.\n  * returns a `net.Socket` clojure connection\n\n* clojure connection\n  * Wraps [nREPL messages](https://github.com/clojure/tools.nrepl#messages).\n  * `clone([session,] callback)\n  * `close([session,] callback)\n  * `describe([verbose,] callback)\n  * `eval(code, [session, id, evalFunc,] callback)\n  * `interrupt(session, id, callback)\n  * `loadFile(fileContent, [fileName, filePath,] callback)\n  * `lsSessions(callback)\n  * `stdin(stdin, callback)\n  * `send(msgObj, callback)` sends a custom message\n\n### `nrepl-client/nrepl-server`\n\n* `start(options, callback)`\n  * `options` options for configuring the nREPL server. Optional. `options == {startTimeout: NUMBER, verbose: BOOL, projectPath: STRING, hostname: STRING, port: NUMBER}`. See [nrepl-server.js](src/nrepl-server.js) for defaults.\n  * `callback(err, serverState)` function called when the server is started. `serverState == {proc: PROCESS, hostname: STRING, port: NUMBER, started: BOOL, exited: BOOL, timedout: BOOL}`\n\n* `stop(serverState, callback)`\n  * `serverState` serverState returned from start\n  * `callback(err)` function called when the server is stopped\n","maintainers":[{"name":"jasongilman","email":"jason.gilman@gmail.com"}],"time":{"modified":"2016-02-06T20:33:58.826Z","created":"2016-02-06T20:33:58.826Z","0.2.3":"2016-02-06T20:33:58.826Z"},"keywords":["Clojure","ClojureScript","nREPL","live programming"],"contributors":[{"name":"Stuart Mitchell","email":"stu@stuartmitchell.com"}],"author":{"name":"Robert Krahn"},"license":"MIT","readmeFilename":"README.md","_attachments":{},"_etag":"\"D91L93GV9KUHI3J08IVCZ974R\""}