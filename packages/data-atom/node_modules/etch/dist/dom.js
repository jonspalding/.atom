'use strict';

var _interopRequireDefault = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

// This function is invoked by JSX expressions to construct `virtual-dom` trees.
//
// For normal HTML tags (when the `tag` parameter is a string), we call through
// to `h`, the virtual-dom library's method for building virtual nodes.
//
// If the user passes a *constructor*, however, we build a special "widget"
// instance to manage the component. [Widgets](https://github.com/Matt-Esch/virtual-dom/blob/master/docs/widget.md)
// are an extension mechanism in the virtual-dom API that allows us to control
// a particular DOM element directly using native DOM APIs. This allows the
// component to manage its DOM element using whatever mechanism it desires,
// independent of the fact that its containing DOM tree is managed by this
// particular library. For more information, see `./component-widget.js`.
exports['default'] = dom;

var _h = require('virtual-dom/h');

var _h2 = _interopRequireDefault(_h);

var _RefHook = require('./ref-hook');

var _RefHook2 = _interopRequireDefault(_RefHook);

var _ComponentWidget = require('./component-widget');

var _ComponentWidget2 = _interopRequireDefault(_ComponentWidget);

function dom(tag, properties) {
  for (var _len = arguments.length, children = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    children[_key - 2] = arguments[_key];
  }

  if (typeof tag === 'function') {
    return new _ComponentWidget2['default'](tag, properties, children);
  } else {
    // Etch allows for a special `ref` property, which will automatically create
    // named references to DOM elements containing the property. We implement
    // this with virtual-dom's [hook system](https://github.com/Matt-Esch/virtual-dom/blob/master/docs/hooks.md),
    // which allows a particular property to be associated with behavior when
    // the element is created or destroyed.
    if (properties && properties.ref) {
      properties.ref = new _RefHook2['default'](properties.ref);
    }
    return _h2['default'](tag, properties, children);
  }
}

module.exports = exports['default'];