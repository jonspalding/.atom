{"name":"atom-language-rust","version":"0.9.0","description":"Rust language grammar with custom enhancements","author":{"name":"Michael Huynh","email":"miqid@outlook.com","url":"https://github.com/miqid"},"keywords":["rust","grammar","language","syntax"],"repository":{"type":"git","url":"git+https://github.com/miqid/atom-language-rust.git"},"homepage":"https://atom.io/packages/atom-language-rust","bugs":{"url":"https://github.com/miqid/atom-language-rust/issues"},"license":"MIT","main":"./index.js","engines":{"atom":">=1.0.0 <2.0.0"},"devDependencies":{"eslint":"^2.2.0"},"readme":"# atom-language-rust\n\n[![apm][apm-badge]][apm]\n[![ci][ci-badge]][ci]\n\nAn [Atom][] package that provides [Rust][] language grammar to facilitate\nsemantic syntax highlighting for a better code writing experience.\n\n## Usage\n\nWith Atom open, this package can be easily installed by opening up\n_Settings View_, clicking on the _Install_ tab that appears, searching for\nthis package name (i.e. `atom-language-rust`) and clicking the _Install_\nbutton in the corresponding package result.\n\nIf you prefer installation via console, enter the following command:\n\n```\napm install atom-language-rust\n```\n\nRemember to stay updated with the latest version, which might contain fixes\nor even new shinier features.\n\n### Package Settings\n\nOnce this package is installed, use the _Settings_ button to access its\nconfiguration options.\n\nUse the _Additional Styles_ option to enable or disable the styles provided\nby this package. If you wish to override the default colours provided for\nany of the Rust language constructs listed, simply provide a colour value.\nIt is worthwhile noting that colour values can be in CSS format.\n\n## Motivation\n\nDevelopment of this package started due to lack of updates and fixes being\ncontributed to another package I was originally using to write Rust code in\nAtom. As Rust is still a flourishing language, I endeavour to keep this\npackage updated with any notable changes to the language.\n\n## Features\n\n- **Custom Syntax Highlighting:** There are many additional language constructs\n  in Rust that are not semantically covered by standard grammar scopes for\n  styling various pieces of syntax. Consequently, a limited colour palette\n  makes it difficult for easily distinguishing between language constructs.\n  This package adds a whole bunch of custom grammar scopes, which provides\n  the option of assigning custom colours to functionally similar groups of\n  language constructs. The best part is that colour configurations should be\n  reflected immediately and do not require Atom to be restarted!\n- **Markdown:** Since [Rust documentation] blocks are written in Markdown,\n  this package also includes custom grammar scopes, based loosely off GitHub\n  flavoured Markdown, to style Markdown constructs. This is an attempt to make\n  documentation appearing alongside code more pleasant to read.\n\nSee [CHANGELOG] for more information.\n\n## Contributing\n\nSee [CONTRIBUTING].\n\n## Q&A\n\n- [Why is ... not given a grammar scope for styling?][Q1]\n- [Why are the styles set through this package not taking effect?][Q2]\n- [Why does this grammar package even offer styling?][Q3]\n\n[Q1]: #why-is-not-given-a-grammar-scope-for-styling\n[Q2]: #why-are-the-styles-set-through-this-package-not-taking-effect\n[Q3]: #why-does-this-grammar-package-even-offer-styling\n\n### Why is ... not given a grammar scope for styling?\n\nIf the item in question is being highlighted in one pattern of code and not in\nanother then it is likely a bug. I would very much appreciate these being\nreported so that they can be fixed up.\n\nFor those not familiar with how most language grammar packages work in Atom,\nthey leverage the [`first-mate`][first-mate] package in order to provide\ngrammar scopes for syntax themes to use. In a nutshell, this package simply\ntakes a whole bunch of grammar match rules (i.e. regular expressions) and\napplies it to a source file. I must stress that this is not the same as a\nnative language parser. As such, there are some things that are extremely\ndifficult (or quite plainly impossible in my opinion) to write match rules for.\nAn example of this would be highlighting the names of all user-defined traits,\nwherever they occur. Without a Rust language parser module, such a task would\nbe madness.\n\n### Why are the styles set through this package not taking effect?\n\nThis package is at the mercy of any other package in the Atom ecosystem that\ndecides to hijack grammar styles. I surmise the majority of these offenders\nwould be syntax theme packages.\n\nAt present, there is not any option to force precedence of the styles contained\nin this package, but I may have a work around which might be rolled into a\nfuture release.\n\n### Why does this grammar package even offer styling?\n\nIn short, convenience.\n\nAs far as I am aware, Atom offers no guidance on scope names that grammar\npackages are allowed to define. Consequently, this makes the lives of syntax\ntheme package creators difficult. The onus is on them to ensure their package\nstyles cover all custom scope names defined by a particular language grammar.\n\nBy providing styles along with this package, syntax theme packages that do not\nexplicitly style all provided scope names will still have syntax highlighting\nfor Rust language constructs not covered. This is the aforementioned\nconvenience. I do not expect every syntax theme package out there to account\nfor the Rust language.\n\nStyles included in this package are enabled by default. If your syntax theme\npackage of choice covers the grammar of this package, you can opt out of\nthe included styles by disabling them via package settings.\n\n[apm]: https://atom.io/packages/atom-language-rust\n[apm-badge]: https://img.shields.io/apm/v/atom-language-rust.svg?style=flat-square\n[atom]: https://atom.io/\n[changelog]: CHANGELOG.md\n[contributing]: CONTRIBUTING.md\n[ci]: https://travis-ci.org/miqid/atom-language-rust\n[ci-badge]: https://img.shields.io/travis/miqid/atom-language-rust/master.svg?style=flat-square\n[first-mate]: https://atom.github.io/first-mate/\n[rust]: https://www.rust-lang.org/\n[rust documentation]: https://doc.rust-lang.org/book/documentation.html\n","readmeFilename":"README.md","_id":"atom-language-rust@0.9.0","_shasum":"d836df3c3faee4665d060a80d8ac14dd130ad93e","_resolved":"file:../d-116723-44387-165k7tf/package.tgz","_from":"../d-116723-44387-165k7tf/package.tgz"}